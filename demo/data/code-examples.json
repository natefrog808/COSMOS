\"type\": \"text_field\",\n        \"text\": \"Username\"\n    })\n    \n    if username_field.get(\"elements\") and len(username_field[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": username_field[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        await agent.run(\"typeText\", {\n            \"text\": \"${username}\"  # Template parameter for username\n        })\n    \n    # Find and interact with password field\n    password_field = await agent.run(\"findElement\", {\n        \"type\": \"text_field\",\n        \"text\": \"Password\"\n    })\n    \n    if password_field.get(\"elements\") and len(password_field[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": password_field[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        await agent.run(\"typeText\", {\n            \"text\": \"${password}\"  # Template parameter for password\n        })\n    \n    # Find and click login button\n    login_button = await agent.run(\"findElement\", {\n        \"type\": \"button\",\n        \"text\": \"Login\"\n    })\n    \n    if login_button.get(\"elements\") and len(login_button[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": login_button[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n    \n    # Wait for login to complete\n    await agent.run(\"wait\", {\n        \"milliseconds\": 2000\n    })\n    \n    # Record this sequence as a pattern\n    pattern = await agent.run(\"recordPattern\", {\n        \"name\": \"LoginSequence\",\n        \"description\": \"Login to application with username and password\"\n    })\n    \n    print(f\"Created pattern with ID: {pattern['patternId']}\")\n    \n    # Now run the pattern with specific credentials\n    print(\"Running login pattern with specific credentials...\")\n    \n    await agent.run(\"runPattern\", {\n        \"patternId\": pattern[\"patternId\"],\n        \"parameters\": {\n            \"username\": \"admin\",\n            \"password\": \"securepassword123\"\n        }\n    })\n    \n    print(\"Login pattern executed successfully!\")\n    \n    # Create a data export pattern\n    print(\"Creating data export pattern...\")\n    \n    # Take a screenshot and analyze the dashboard screen\n    await agent.run(\"takeScreenshot\")\n    await agent.run(\"analyzeScreen\")\n    \n    # Find and click export button\n    export_button = await agent.run(\"findElement\", {\n        \"type\": \"button\",\n        \"text\": \"Export\"\n    })\n    \n    if export_button.get(\"elements\") and len(export_button[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": export_button[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n    \n    # Select export format (dropdown)\n    format_dropdown = await agent.run(\"findElement\", {\n        \"type\": \"dropdown\",\n        \"text\": \"Format\"\n    })\n    \n    if format_dropdown.get(\"elements\") and len(format_dropdown[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": format_dropdown[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        # Find and select format option\n        format_option = await agent.run(\"findElement\", {\n            \"text\": \"${format}\"  # Template parameter for format\n        })\n        \n        if format_option.get(\"elements\") and len(format_option[\"elements\"]) > 0:\n            await agent.run(\"interactWithElement\", {\n                \"elementId\": format_option[\"elements\"][0][\"id\"],\n                \"action\": \"click\"\n            })\n    \n    # Find and click download button\n    download_button = await agent.run(\"findElement\", {\n        \"type\": \"button\",\n        \"text\": \"Download\"\n    })\n    \n    if download_button.get(\"elements\") and len(download_button[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": download_button[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n    \n    # Wait for download to complete\n    await agent.run(\"wait\", {\n        \"milliseconds\": 3000\n    })\n    \n    # Record this sequence as a pattern\n    export_pattern = await agent.run(\"recordPattern\", {\n        \"name\": \"DataExport\",\n        \"description\": \"Export data in specified format\"\n    })\n    \n    print(f\"Created export pattern with ID: {export_pattern['patternId']}\")\n    \n    # Run the export pattern with CSV format\n    print(\"Running export pattern with CSV format...\")\n    \n    await agent.run(\"runPattern\", {\n        \"patternId\": export_pattern[\"patternId\"],\n        \"parameters\": {\n            \"format\": \"CSV\"\n        }\n    })\n    \n    print(\"Export pattern executed successfully!\")\n\n# Run the workflow patterns demo\nasyncio.run(workflow_patterns_demo())"
      },
      "screenshot": "workflow-patterns-screenshot.png",
      "keywords": ["pattern", "workflow", "automation", "template", "parameters", "reusable"],
      "usedActions": ["takeScreenshot", "analyzeScreen", "findElement", "interactWithElement", "typeText", "wait", "recordPattern", "runPattern", "listPatterns"]
    },
    {
      "id": "data-entry-automation",
      "title": "Data Entry Automation Example",
      "description": "Automate repetitive data entry across multiple applications",
      "category": "productivity-automation",
      "complexity": "intermediate",
      "code": {
        "javascript": "// Data Entry Automation with COSMOS\nimport { COSMOS } from '@cosmos/core';\nimport fs from 'fs';\n\nasync function autoDataEntry() {\n  // Initialize COSMOS agent\n  const cosmos = await COSMOS.initialize({\n    workspaceName: 'Data Entry Automation'\n  });\n  \n  const agent = cosmos.start();\n  \n  // Load data from CSV file\n  const data = fs.readFileSync('./customer-data.csv', 'utf8');\n  const rows = data.split('\\n').map(row => row.split(','));\n  const headers = rows[0];\n  const customers = rows.slice(1).map(row => {\n    const customer = {};\n    headers.forEach((header, index) => {\n      customer[header] = row[index];\n    });\n    return customer;\n  });\n  \n  console.log(`Loaded ${customers.length} customer records for processing`);\n  \n  // Process each customer\n  for (const customer of customers) {\n    console.log(`Processing customer: ${customer.first_name} ${customer.last_name}`);\n    \n    // First, open CRM application\n    // (This step would vary depending on your specific CRM)\n    \n    // Take screenshot and analyze\n    await agent.run('takeScreenshot');\n    await agent.run('analyzeScreen');\n    \n    // Find and click \"Add Customer\" button\n    const addButton = await agent.run('findElement', {\n      type: 'button',\n      text: 'Add Customer'\n    });\n    \n    if (addButton.elements && addButton.elements.length > 0) {\n      await agent.run('interactWithElement', {\n        elementId: addButton.elements[0].id,\n        action: 'click'\n      });\n    } else {\n      console.error('Could not find Add Customer button');\n      continue; // Skip to next customer\n    }\n    \n    // Fill out customer information form\n    const fieldMappings = [\n      { field: 'First Name', value: customer.first_name },\n      { field: 'Last Name', value: customer.last_name },\n      { field: 'Email', value: customer.email },\n      { field: 'Phone', value: customer.phone },\n      { field: 'Address', value: customer.address },\n      { field: 'City', value: customer.city },\n      { field: 'State/Province', value: customer.state },\n      { field: 'Postal Code', value: customer.zip },\n      { field: 'Country', value: customer.country }\n    ];\n    \n    // Process each field\n    for (const mapping of fieldMappings) {\n      // Find the field\n      const field = await agent.run('findElement', {\n        type: 'text_field',\n        text: mapping.field\n      });\n      \n      if (field.elements && field.elements.length > 0) {\n        // Click on the field\n        await agent.run('interactWithElement', {\n          elementId: field.elements[0].id,\n          action: 'click'\n        });\n        \n        // Type the value\n        await agent.run('typeText', {\n          text: mapping.value\n        });\n        \n        // Press Tab to move to next field\n        await agent.run('pressKey', {\n          key: 'tab'\n        });\n      } else {\n        console.warn(`Could not find field: ${mapping.field}`);\n      }\n    }\n    \n    // Find and click Save button\n    const saveButton = await agent.run('findElement', {\n      type: 'button',\n      text: 'Save'\n    });\n    \n    if (saveButton.elements && saveButton.elements.length > 0) {\n      await agent.run('interactWithElement', {\n        elementId: saveButton.elements[0].id,\n        action: 'click'\n      });\n      \n      console.log(`Successfully added customer: ${customer.first_name} ${customer.last_name}`);\n      \n      // Wait for save to complete\n      await agent.run('wait', {\n        milliseconds: 2000\n      });\n    } else {\n      console.error('Could not find Save button');\n    }\n  }\n  \n  console.log(`Completed processing ${customers.length} customer records`);\n}",
        "python": "# Data Entry Automation with COSMOS\nimport asyncio\nimport csv\nfrom cosmos import COSMOS\n\nasync def auto_data_entry():\n    # Initialize COSMOS agent\n    cosmos = await COSMOS.initialize(\n        workspace_name=\"Data Entry Automation\"\n    )\n    \n    agent = await cosmos.start()\n    \n    # Load data from CSV file\n    customers = []\n    with open('./customer-data.csv', 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            customers.append(row)\n    \n    print(f\"Loaded {len(customers)} customer records for processing\")\n    \n    # Process each customer\n    for customer in customers:\n        print(f\"Processing customer: {customer['first_name']} {customer['last_name']}\")\n        \n        # First, open CRM application\n        # (This step would vary depending on your specific CRM)\n        \n        # Take screenshot and analyze\n        await agent.run(\"takeScreenshot\")\n        await agent.run(\"analyzeScreen\")\n        \n        # Find and click \"Add Customer\" button\n        add_button = await agent.run(\"findElement\", {\n            \"type\": \"button\",\n            \"text\": \"Add Customer\"\n        })\n        \n        if add_button.get(\"elements\") and len(add_button[\"elements\"]) > 0:\n            await agent.run(\"interactWithElement\", {\n                \"elementId\": add_button[\"elements\"][0][\"id\"],\n                \"action\": \"click\"\n            })\n        else:\n            print(\"Could not find Add Customer button\")\n            continue  # Skip to next customer\n        \n        # Fill out customer information form\n        field_mappings = [\n            {\"field\": \"First Name\", \"value\": customer[\"first_name\"]},\n            {\"field\": \"Last Name\", \"value\": customer[\"last_name\"]},\n            {\"field\": \"Email\", \"value\": customer[\"email\"]},\n            {\"field\": \"Phone\", \"value\": customer[\"phone\"]},\n            {\"field\": \"Address\", \"value\": customer[\"address\"]},\n            {\"field\": \"City\", \"value\": customer[\"city\"]},\n            {\"field\": \"State/Province\", \"value\": customer[\"state\"]},\n            {\"field\": \"Postal Code\", \"value\": customer[\"zip\"]},\n            {\"field\": \"Country\", \"value\": customer[\"country\"]}\n        ]\n        \n        # Process each field\n        for mapping in field_mappings:\n            # Find the field\n            field = await agent.run(\"findElement\", {\n                \"type\": \"text_field\",\n                \"text\": mapping[\"field\"]\n            })\n            \n            if field.get(\"elements\") and len(field[\"elements\"]) > 0:\n                # Click on the field\n                await agent.run(\"interactWithElement\", {\n                    \"elementId\": field[\"elements\"][0][\"id\"],\n                    \"action\": \"click\"\n                })\n                \n                # Type the value\n                await agent.run(\"typeText\", {\n                    \"text\": mapping[\"value\"]\n                })\n                \n                # Press Tab to move to next field\n                await agent.run(\"pressKey\", {\n                    \"key\": \"tab\"\n                })\n            else:\n                print(f\"Could not find field: {mapping['field']}\")\n        \n        # Find and click Save button\n        save_button = await agent.run(\"findElement\", {\n            \"type\": \"button\",\n            \"text\": \"Save\"\n        })\n        \n        if save_button.get(\"elements\") and len(save_button[\"elements\"]) > 0:\n            await agent.run(\"interactWithElement\", {\n                \"elementId\": save_button[\"elements\"][0][\"id\"],\n                \"action\": \"click\"\n            })\n            \n            print(f\"Successfully added customer: {customer['first_name']} {customer['last_name']}\")\n            \n            # Wait for save to complete\n            await agent.run(\"wait\", {\n                \"milliseconds\": 2000\n            })\n        else:\n            print(\"Could not find Save button\")\n    \n    print(f\"Completed processing {len(customers)} customer records\")\n\n# Run the data entry automation\nasyncio.run(auto_data_entry())"
      },
      "screenshot": "data-entry-screenshot.png",
      "keywords": ["data entry", "automation", "csv", "form", "batch processing"],
      "usedActions": ["takeScreenshot", "analyzeScreen", "findElement", "interactWithElement", "typeText", "pressKey", "wait"]
    },
    {
      "id": "user-interface-testing",
      "title": "UI Testing Automation Example",
      "description": "Automate UI testing for web and desktop applications",
      "category": "testing-automation",
      "complexity": "advanced",
      "code": {
        "javascript": "// UI Testing Automation with COSMOS\nimport { COSMOS } from '@cosmos/core';\nimport fs from 'fs';\n\nasync function runUITests() {\n  // Initialize COSMOS agent\n  const cosmos = await COSMOS.initialize({\n    workspaceName: 'UI Testing'\n  });\n  \n  const agent = cosmos.start();\n  \n  // Load test cases\n  const testCases = JSON.parse(fs.readFileSync('./test-cases.json', 'utf8'));\n  \n  // Test results\n  const results = {\n    total: testCases.length,\n    passed: 0,\n    failed: 0,\n    skipped: 0,\n    details: []\n  };\n  \n  // Run each test case\n  for (const test of testCases) {\n    console.log(`\\nExecuting test: ${test.name}`);\n    console.log(`Description: ${test.description}`);\n    \n    const testResult = {\n      name: test.name,\n      description: test.description,\n      steps: [],\n      status: 'pending',\n      startTime: new Date().toISOString()\n    };\n    \n    try {\n      // Execute each step in the test\n      for (const step of test.steps) {\n        console.log(`  Step: ${step.description}`);\n        const stepResult = { description: step.description, status: 'pending' };\n        \n        try {\n          // Take screenshot before action\n          await agent.run('takeScreenshot', {\n            savePath: `./screenshots/${test.name}-${step.id}-before.png`\n          });\n          \n          // Analyze the screen\n          await agent.run('analyzeScreen');\n          \n          // Execute the action\n          switch (step.action) {\n            case 'find':\n              const findResult = await agent.run('findElement', step.params);\n              stepResult.elementFound = findResult.elements && findResult.elements.length > 0;\n              break;\n              \n            case 'click':\n              // First find the element\n              const elementToClick = await agent.run('findElement', step.params.find);\n              \n              if (elementToClick.elements && elementToClick.elements.length > 0) {\n                // Click on the element\n                await agent.run('interactWithElement', {\n                  elementId: elementToClick.elements[0].id,\n                  action: 'click'\n                });\n                stepResult.elementFound = true;\n              } else {\n                stepResult.elementFound = false;\n                throw new Error(`Element not found for clicking: ${JSON.stringify(step.params.find)}`);\n              }\n              break;\n              \n            case 'type':\n              // First find the element\n              const elementToType = await agent.run('findElement', step.params.find);\n              \n              if (elementToType.elements && elementToType.elements.length > 0) {\n                // Click on the element\n                await agent.run('interactWithElement', {\n                  elementId: elementToType.elements[0].id,\n                  action: 'click'\n                });\n                \n                // Type the text\n                await agent.run('typeText', {\n                  text: step.params.text\n                });\n                stepResult.elementFound = true;\n              } else {\n                stepResult.elementFound = false;\n                throw new Error(`Element not found for typing: ${JSON.stringify(step.params.find)}`);\n              }\n              break;\n              \n            case 'wait':\n              await agent.run('wait', {\n                milliseconds: step.params.milliseconds\n              });\n              break;\n              \n            case 'verify':\n              // Take screenshot to analyze current state\n              await agent.run('takeScreenshot');\n              await agent.run('analyzeScreen');\n              \n              // Find element for verification\n              const verifyResult = await agent.run('findElement', step.params.find);\n              \n              if (verifyResult.elements && verifyResult.elements.length > 0) {\n                stepResult.elementFound = true;\n                stepResult.verification = true;\n              } else {\n                stepResult.elementFound = false;\n                stepResult.verification = false;\n                throw new Error(`Verification failed: Element not found: ${JSON.stringify(step.params.find)}`);\n              }\n              break;\n              \n            default:\n              throw new Error(`Unknown action type: ${step.action}`);\n          }\n          \n          // Take screenshot after action\n          await agent.run('takeScreenshot', {\n            savePath: `./screenshots/${test.name}-${step.id}-after.png`\n          });\n          \n          stepResult.status = 'passed';\n          console.log(`    ✅ Success`);\n        } catch (error) {\n          stepResult.status = 'failed';\n          stepResult.error = error.message;\n          console.log(`    ❌ Failed: ${error.message}`);\n          \n          // If step is critical, fail the test\n          if (step.critical) {\n            throw error;\n          }\n        }\n        \n        testResult.steps.push(stepResult);\n      }\n      \n      // If we got here, the test passed\n      testResult.status = 'passed';\n      testResult.endTime = new Date().toISOString();\n      results.passed++;\n      console.log(`Test passed: ${test.name}`);\n    } catch (error) {\n      // Test failed\n      testResult.status = 'failed';\n      testResult.error = error.message;\n      testResult.endTime = new Date().toISOString();\n      results.failed++;\n      console.log(`Test failed: ${test.name}`)\n      console.log(`Error: ${error.message}`);\n    }\n    \n    results.details.push(testResult);\n  }\n  \n  // Generate test report\n  const report = {\n    summary: results,\n    timestamp: new Date().toISOString(),\n    duration: results.details.reduce((total, test) => {\n      if (test.startTime && test.endTime) {\n        return total + (new Date(test.endTime) - new Date(test.startTime));\n      }\n      return total;\n    }, 0)\n  };\n  \n  fs.writeFileSync('./test-report.json', JSON.stringify(report, null, 2));\n  \n  console.log('\\n======= TEST SUMMARY =======');\n  console.log(`Total: ${results.total}`);\n  console.log(`Passed: ${results.passed}`);\n  console.log(`Failed: ${results.failed}`);\n  console.log(`Skipped: ${results.skipped}`);\n  console.log(`Success Rate: ${Math.round((results.passed / results.total) * 100)}%`);\n  console.log('===========================');\n}",
        "python": "# UI Testing Automation with COSMOS\nimport asyncio\nimport json\nimport os\nfrom datetime import datetime\nfrom cosmos import COSMOS\n\nasync def run_ui_tests():\n    # Initialize COSMOS agent\n    cosmos = await COSMOS.initialize(\n        workspace_name=\"UI Testing\"\n    )\n    \n    agent = await cosmos.start()\n    \n    # Load test cases\n    with open('./test-cases.json', 'r') as file:\n        test_cases = json.load(file)\n    \n    # Test results\n    results = {\n        \"total\": len(test_cases),\n        \"passed\": 0,\n        \"failed\": 0,\n        \"skipped\": 0,\n        \"details\": []\n    }\n    \n    # Ensure screenshots directory exists\n    os.makedirs('./screenshots', exist_ok=True)\n    \n    # Run each test case\n    for test in test_cases:\n        print(f\"\\nExecuting test: {test['name']}\")\n        print(f\"Description: {test['description']}\")\n        \n        test_result = {\n            \"name\": test[\"name\"],\n            \"description\": test[\"description\"],\n            \"steps\": [],\n            \"status\": \"pending\",\n            \"startTime\": datetime.now().isoformat()\n        }\n        \n        try:\n            # Execute each step in the test\n            for step in test[\"steps\"]:\n                print(f\"  Step: {step['description']}\")\n                step_result = {\"description\": step[\"description\"], \"status\": \"pending\"}\n                \n                try:\n                    # Take screenshot before action\n                    await agent.run(\"takeScreenshot\", {\n                        \"savePath\": f\"./screenshots/{test['name']}-{step['id']}-before.png\"\n                    })\n                    \n                    # Analyze the screen\n                    await agent.run(\"analyzeScreen\")\n                    \n                    # Execute the action\n                    if step[\"action\"] == \"find\":\n                        find_result = await agent.run(\"findElement\", step[\"params\"])\n                        step_result[\"elementFound\"] = bool(find_result.get(\"elements\") and len(find_result[\"elements\"]) > 0)\n                    \n                    elif step[\"action\"] == \"click\":\n                        # First find the element\n                        element_to_click = await agent.run(\"findElement\", step[\"params\"][\"find\"])\n                        \n                        if element_to_click.get(\"elements\") and len(element_to_click[\"elements\"]) > 0:\n                            # Click on the element\n                            await agent.run(\"interactWithElement\", {\n                                \"elementId\": element_to_click[\"elements\"][0][\"id\"],\n                                \"action\": \"click\"\n                            })\n                            step_result[\"elementFound\"] = True\n                        else:\n                            step_result[\"elementFound\"] = False\n                            raise Exception(f\"Element not found for clicking: {step['params']['find']}\")\n                    \n                    elif step[\"action\"] == \"type\":\n                        # First find the element\n                        element_to_type = await agent.run(\"findElement\", step[\"params\"][\"find\"])\n                        \n                        if element_to_type.get(\"elements\") and len(element_to_type[\"elements\"]) > 0:\n                            # Click on the element\n                            await agent.run(\"interactWithElement\", {\n                                \"elementId\": element_to_type[\"elements\"][0][\"id\"],\n                                \"action\": \"click\"\n                            })\n                            \n                            # Type the text\n                            await agent.run(\"typeText\", {\n                                \"text\": step[\"params\"][\"text\"]\n                            })\n                            step_result[\"elementFound\"] = True\n                        else:\n                            step_result[\"elementFound\"] = False\n                            raise Exception(f\"Element not found for typing: {step['params']['find']}\")\n                    \n                    elif step[\"action\"] == \"wait\":\n                        await agent.run(\"wait\", {\n                            \"milliseconds\": step[\"params\"][\"milliseconds\"]\n                        })\n                    \n                    elif step[\"action\"] == \"verify\":\n                        # Take screenshot to analyze current state\n                        await agent.run(\"takeScreenshot\")\n                        await agent.run(\"analyzeScreen\")\n                        \n                        # Find element for verification\n                        verify_result = await agent.run(\"findElement\", step[\"params\"][\"find\"])\n                        \n                        if verify_result.get(\"elements\") and len(verify_result[\"elements\"]) > 0:\n                            step_result[\"elementFound\"] = True\n                            step_result[\"verification\"] = True\n                        else:\n                            step_result[\"elementFound\"] = False\n                            step_result[\"verification\"] = False\n                            raise Exception(f\"Verification failed: Element not found: {step['params']['find']}\")\n                    \n                    else:\n                        raise Exception(f\"Unknown action type: {step['action']}\")\n                    \n                    # Take screenshot after action\n                    await agent.run(\"takeScreenshot\", {\n                        \"savePath\": f\"./screenshots/{test['name']}-{step['id']}-after.png\"\n                    })\n                    \n                    step_result[\"status\"] = \"passed\"\n                    print(f\"    ✅ Success\")\n                except Exception as e:\n                    step_result[\"status\"] = \"failed\"\n                    step_result[\"error\"] = str(e)\n                    print(f\"    ❌ Failed: {str(e)}\")\n                    \n                    # If step is critical, fail the test\n                    if step.get(\"critical\"):\n                        raise e\n                \n                test_result[\"steps\"].append(step_result)\n            \n            # If we got here, the test passed\n            test_result[\"status\"] = \"passed\"\n            test_result[\"endTime\"] = datetime.now().isoformat()\n            results[\"passed\"] += 1\n            print(f\"Test passed: {test['name']}\")\n        except Exception as e:\n            # Test failed\n            test_result[\"status\"] = \"failed\"\n            test_result[\"error\"] = str(e)\n            test_result[\"endTime\"] = datetime.now().isoformat()\n            results[\"failed\"] += 1\n            print(f\"Test failed: {test['name']}\")\n            print(f\"Error: {str(e)}\")\n        \n        results[\"details\"].append(test_result)\n    \n    # Generate test report\n    def parse_iso_time(iso_str):\n        return datetime.fromisoformat(iso_str.replace('Z', '+00:00'))\n    \n    total_duration_ms = sum(\n        (parse_iso_time(test[\"endTime\"]) - parse_iso_time(test[\"startTime\"])).total_seconds() * 1000\n        for test in results[\"details\"]\n        if \"startTime\" in test and \"endTime\" in test\n    )\n    \n    report = {\n        \"summary\": results,\n        \"timestamp\": datetime.now().isoformat(),\n        \"duration\": total_duration_ms\n    }\n    \n    with open('./test-report.json', 'w') as file:\n        json.dump(report, file, indent=2)\n    \n    print('\\n======= TEST SUMMARY =======')\n    print(f\"Total: {results['total']}\")\n    print(f\"Passed: {results['passed']}\")\n    print(f\"Failed: {results['failed']}\")\n    print(f\"Skipped: {results['skipped']}\")\n    print(f\"Success Rate: {round((results['passed'] / results['total']) * 100)}%\")\n    print('===========================')\n\n# Run the UI tests\nasyncio.run(run_ui_tests())"
      },
      "screenshot": "ui-testing-screenshot.png",
      "keywords": ["testing", "ui", "automation", "verification", "test cases", "reporting"],
      "usedActions": ["takeScreenshot", "analyzeScreen", "findElement", "interactWithElement", "typeText", "wait"]
    }
  ],
  "categories": [
    {
      "id": "web-automation",
      "name": "Web Automation",
      "description": "Automate tasks in web browsers and web applications",
      "count": 1
    },
    {
      "id": "system-automation",
      "name": "System Automation",
      "description": "Automate system tasks and monitoring",
      "count": 1
    },
    {
      "id": "automation-patterns",
      "name": "Automation Patterns",
      "description": "Create reusable automation patterns for repetitive tasks",
      "count": 1
    },
    {
      "id": "productivity-automation",
      "name": "Productivity Automation",
      "description": "Automate tasks to improve productivity",
      "count": 1
    },
    {
      "id": "testing-automation",
      "name": "Testing Automation",
      "description": "Automate testing processes",
      "count": 1
    }
  ],
  "complexity": [
    {
      "id": "beginner",
      "name": "Beginner",
      "description": "Simple examples for beginners",
      "count": 1
    },
    {
      "id": "intermediate",
      "name": "Intermediate",
      "description": "Examples for users with some experience",
      "count": 2
    },
    {
      "id": "advanced",
      "name": "Advanced",
      "description": "Complex examples for advanced users",
      "count": 2
    }
  ],
  "actions": [
    {
      "name": "takeScreenshot",
      "description": "Capture the current screen state",
      "usage": 5
    },
    {
      "name": "analyzeScreen",
      "description": "Analyze the screen to identify UI elements",
      "usage": 5
    },
    {
      "name": "findElement",
      "description": "Find a UI element by text or type",
      "usage": 5
    },
    {
      "name": "interactWithElement",
      "description": "Interact with a UI element by ID or description",
      "usage": 5
    },
    {
      "name": "typeText",
      "description": "Type text at the current cursor position",
      "usage": 5
    },
    {
      "name": "pressKey",
      "description": "Press a specific key or key combination",
      "usage": 3
    },
    {
      "name": "wait",
      "description": "Wait for a specific amount of time",
      "usage": 5
    },
    {
      "name": "getSystemInfo",
      "description": "Get detailed information about the system",
      "usage": 1
    },
    {
      "name": "detectActiveWindow",
      "description": "Detect the currently active window",
      "usage": 1
    },
    {
      "name": "sendNotification",
      "description": "Send a system notification",
      "usage": 1
    },
    {
      "name": "addTask",
      "description": "Add a new task to the automation queue",
      "usage": 2
    },
    {
      "name": "recordPattern",
      "description": "Record a series of actions as a reusable automation pattern",
      "usage": 2
    },
    {
      "name": "runPattern",
      "description": "Run a previously recorded automation pattern",
      "usage": 2
    },
    {
      "name": "listPatterns",
      "description": "List all available automation patterns",
      "usage": 1
    }
  ],
  "meta": {
    "version": "1.0.0",
    "lastUpdated": "2025-03-08T15:30:00Z",
    "totalExamples": 5,
    "totalCategories": 5,
    "totalActions": 14
  }
}{
  "examples": [
    {
      "id": "form-automation",
      "title": "Form Automation Example",
      "description": "Automatically fill out web forms with intelligent field detection and data entry",
      "category": "web-automation",
      "complexity": "beginner",
      "code": {
        "javascript": "// Form Automation with COSMOS\nimport { COSMOS } from '@cosmos/core';\n\nasync function automateForm() {\n  // Initialize COSMOS agent\n  const cosmos = await COSMOS.initialize({\n    workspaceName: 'Form Automation'\n  });\n  \n  const agent = cosmos.start();\n  \n  // Capture and analyze the screen\n  await agent.run('takeScreenshot');\n  await agent.run('analyzeScreen');\n  \n  // Find form fields\n  const nameField = await agent.run('findElement', {\n    type: 'text_field',\n    text: 'Name'\n  });\n  \n  if (nameField.elements && nameField.elements.length > 0) {\n    // Fill in the name field\n    await agent.run('interactWithElement', {\n      elementId: nameField.elements[0].id,\n      action: 'click'\n    });\n    \n    await agent.run('typeText', {\n      text: 'John Doe'\n    });\n  }\n  \n  // Find and fill the email field\n  const emailField = await agent.run('findElement', {\n    type: 'text_field',\n    text: 'Email'\n  });\n  \n  if (emailField.elements && emailField.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: emailField.elements[0].id,\n      action: 'click'\n    });\n    \n    await agent.run('typeText', {\n      text: 'john.doe@example.com'\n    });\n  }\n  \n  // Find and fill message field\n  const messageField = await agent.run('findElement', {\n    type: 'text_field',\n    text: 'Message'\n  });\n  \n  if (messageField.elements && messageField.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: messageField.elements[0].id,\n      action: 'click'\n    });\n    \n    await agent.run('typeText', {\n      text: 'This is an automated message sent using COSMOS!'\n    });\n  }\n  \n  // Find and click submit button\n  const submitButton = await agent.run('findElement', {\n    type: 'button',\n    text: 'Submit'\n  });\n  \n  if (submitButton.elements && submitButton.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: submitButton.elements[0].id,\n      action: 'click'\n    });\n    \n    // Wait for form submission\n    await agent.run('wait', {\n      milliseconds: 2000\n    });\n    \n    // Take screenshot of result\n    await agent.run('takeScreenshot', {\n      savePath: './form-result.png'\n    });\n    \n    console.log('Form submitted successfully!');\n  }\n}",
        "python": "# Form Automation with COSMOS\nimport asyncio\nfrom cosmos import COSMOS\n\nasync def automate_form():\n    # Initialize COSMOS agent\n    cosmos = await COSMOS.initialize(\n        workspace_name=\"Form Automation\"\n    )\n    \n    agent = await cosmos.start()\n    \n    # Capture and analyze the screen\n    await agent.run(\"takeScreenshot\")\n    await agent.run(\"analyzeScreen\")\n    \n    # Find form fields\n    name_field = await agent.run(\"findElement\", {\n        \"type\": \"text_field\",\n        \"text\": \"Name\"\n    })\n    \n    if name_field.get(\"elements\") and len(name_field[\"elements\"]) > 0:\n        # Fill in the name field\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": name_field[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        await agent.run(\"typeText\", {\n            \"text\": \"John Doe\"\n        })\n    \n    # Find and fill the email field\n    email_field = await agent.run(\"findElement\", {\n        \"type\": \"text_field\",\n        \"text\": \"Email\"\n    })\n    \n    if email_field.get(\"elements\") and len(email_field[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": email_field[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        await agent.run(\"typeText\", {\n            \"text\": \"john.doe@example.com\"\n        })\n    \n    # Find and fill message field\n    message_field = await agent.run(\"findElement\", {\n        \"type\": \"text_field\",\n        \"text\": \"Message\"\n    })\n    \n    if message_field.get(\"elements\") and len(message_field[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": message_field[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        await agent.run(\"typeText\", {\n            \"text\": \"This is an automated message sent using COSMOS!\"\n        })\n    \n    # Find and click submit button\n    submit_button = await agent.run(\"findElement\", {\n        \"type\": \"button\",\n        \"text\": \"Submit\"\n    })\n    \n    if submit_button.get(\"elements\") and len(submit_button[\"elements\"]) > 0:\n        await agent.run(\"interactWithElement\", {\n            \"elementId\": submit_button[\"elements\"][0][\"id\"],\n            \"action\": \"click\"\n        })\n        \n        # Wait for form submission\n        await agent.run(\"wait\", {\n            \"milliseconds\": 2000\n        })\n        \n        # Take screenshot of result\n        await agent.run(\"takeScreenshot\", {\n            \"savePath\": \"./form-result.png\"\n        })\n        \n        print(\"Form submitted successfully!\")\n\n# Run the automation\nasyncio.run(automate_form())"
      },
      "screenshot": "form-automation-screenshot.png",
      "keywords": ["form", "web", "automation", "input", "user interface"],
      "usedActions": ["takeScreenshot", "analyzeScreen", "findElement", "interactWithElement", "typeText", "wait"]
    },
    {
      "id": "system-monitoring",
      "title": "System Monitoring Example",
      "description": "Monitor system resources and generate alerts when thresholds are exceeded",
      "category": "system-automation",
      "complexity": "intermediate",
      "code": {
        "javascript": "// System Monitoring with COSMOS\nimport { COSMOS } from '@cosmos/core';\n\nasync function monitorSystem() {\n  // Initialize COSMOS agent\n  const cosmos = await COSMOS.initialize({\n    workspaceName: 'System Monitoring'\n  });\n  \n  const agent = cosmos.start();\n  \n  // Define resource thresholds\n  const thresholds = {\n    cpu: 80, // 80% CPU usage\n    memory: 85, // 85% memory usage\n    disk: 90 // 90% disk usage\n  };\n  \n  // Start monitoring loop\n  let isMonitoring = true;\n  \n  console.log('Starting system monitoring...');\n  \n  while (isMonitoring) {\n    // Get system information\n    const sysInfo = await agent.run('getSystemInfo');\n    \n    console.log(`CPU Usage: ${sysInfo.cpu.loadAverage[0].toFixed(2)}%`);\n    console.log(`Memory Usage: ${(100 - (sysInfo.memory.freeGB / sysInfo.memory.totalGB) * 100).toFixed(2)}%`);\n    \n    // Check CPU threshold\n    if (sysInfo.cpu.loadAverage[0] > thresholds.cpu) {\n      await agent.run('sendNotification', {\n        title: 'High CPU Usage Alert',\n        message: `CPU usage at ${sysInfo.cpu.loadAverage[0].toFixed(2)}%, exceeding threshold of ${thresholds.cpu}%`,\n        type: 'warning'\n      });\n      \n      // Take a screenshot of the system state\n      await agent.run('takeScreenshot', {\n        savePath: `./high-cpu-${Date.now()}.png`\n      });\n      \n      // Log to system\n      await agent.run('addTask', {\n        description: `Investigate high CPU usage - ${sysInfo.cpu.loadAverage[0].toFixed(2)}%`,\n        priority: 'high'\n      });\n    }\n    \n    // Check memory threshold\n    const memoryUsage = 100 - (sysInfo.memory.freeGB / sysInfo.memory.totalGB) * 100;\n    if (memoryUsage > thresholds.memory) {\n      await agent.run('sendNotification', {\n        title: 'High Memory Usage Alert',\n        message: `Memory usage at ${memoryUsage.toFixed(2)}%, exceeding threshold of ${thresholds.memory}%`,\n        type: 'warning'\n      });\n      \n      // Create a task to investigate\n      await agent.run('addTask', {\n        description: `Investigate high memory usage - ${memoryUsage.toFixed(2)}%`,\n        priority: 'high'\n      });\n    }\n    \n    // Get active window info\n    const windowInfo = await agent.run('detectActiveWindow');\n    if (windowInfo.window) {\n      console.log(`Active application: ${windowInfo.window.title}`);\n    }\n    \n    // Wait before next check (60 seconds)\n    await new Promise(resolve => setTimeout(resolve, 60000));\n  }\n}",
        "python": "# System Monitoring with COSMOS\nimport asyncio\nimport time\nfrom cosmos import COSMOS\n\nasync def monitor_system():\n    # Initialize COSMOS agent\n    cosmos = await COSMOS.initialize(\n        workspace_name=\"System Monitoring\"\n    )\n    \n    agent = await cosmos.start()\n    \n    # Define resource thresholds\n    thresholds = {\n        \"cpu\": 80,  # 80% CPU usage\n        \"memory\": 85,  # 85% memory usage\n        \"disk\": 90  # 90% disk usage\n    }\n    \n    # Start monitoring loop\n    is_monitoring = True\n    \n    print(\"Starting system monitoring...\")\n    \n    while is_monitoring:\n        # Get system information\n        sys_info = await agent.run(\"getSystemInfo\")\n        \n        print(f\"CPU Usage: {sys_info['cpu']['loadAverage'][0]:.2f}%\")\n        print(f\"Memory Usage: {(100 - (sys_info['memory']['freeGB'] / sys_info['memory']['totalGB']) * 100):.2f}%\")\n        \n        # Check CPU threshold\n        if sys_info['cpu']['loadAverage'][0] > thresholds['cpu']:\n            await agent.run(\"sendNotification\", {\n                \"title\": \"High CPU Usage Alert\",\n                \"message\": f\"CPU usage at {sys_info['cpu']['loadAverage'][0]:.2f}%, \"\n                          f\"exceeding threshold of {thresholds['cpu']}%\",\n                \"type\": \"warning\"\n            })\n            \n            # Take a screenshot of the system state\n            await agent.run(\"takeScreenshot\", {\n                \"savePath\": f\"./high-cpu-{int(time.time())}.png\"\n            })\n            \n            # Log to system\n            await agent.run(\"addTask\", {\n                \"description\": f\"Investigate high CPU usage - {sys_info['cpu']['loadAverage'][0]:.2f}%\",\n                \"priority\": \"high\"\n            })\n        \n        # Check memory threshold\n        memory_usage = 100 - (sys_info['memory']['freeGB'] / sys_info['memory']['totalGB']) * 100\n        if memory_usage > thresholds['memory']:\n            await agent.run(\"sendNotification\", {\n                \"title\": \"High Memory Usage Alert\",\n                \"message\": f\"Memory usage at {memory_usage:.2f}%, \"\n                          f\"exceeding threshold of {thresholds['memory']}%\",\n                \"type\": \"warning\"\n            })\n            \n            # Create a task to investigate\n            await agent.run(\"addTask\", {\n                \"description\": f\"Investigate high memory usage - {memory_usage:.2f}%\",\n                \"priority\": \"high\"\n            })\n        \n        # Get active window info\n        window_info = await agent.run(\"detectActiveWindow\")\n        if window_info.get(\"window\"):\n            print(f\"Active application: {window_info['window']['title']}\")\n        \n        # Wait before next check (60 seconds)\n        await asyncio.sleep(60)\n\n# Run the monitoring system\nasyncio.run(monitor_system())"
      },
      "screenshot": "system-monitoring-screenshot.png",
      "keywords": ["monitoring", "system", "resources", "alerts", "cpu", "memory"],
      "usedActions": ["getSystemInfo", "detectActiveWindow", "sendNotification", "takeScreenshot", "addTask"]
    },
    {
      "id": "workflow-patterns",
      "title": "Workflow Patterns Example",
      "description": "Create, save, and execute reusable automation patterns",
      "category": "automation-patterns",
      "complexity": "advanced",
      "code": {
        "javascript": "// Workflow Patterns with COSMOS\nimport { COSMOS } from '@cosmos/core';\n\nasync function workflowPatternsDemo() {\n  // Initialize COSMOS agent\n  const cosmos = await COSMOS.initialize({\n    workspaceName: 'Workflow Patterns'\n  });\n  \n  const agent = cosmos.start();\n  \n  // Check if we already have patterns\n  const patternsList = await agent.run('listPatterns');\n  console.log(`Found ${patternsList.patterns ? patternsList.patterns.length : 0} existing patterns`);\n  \n  // Create a login pattern\n  console.log('Creating login pattern...');\n  \n  // First, navigate to the login page\n  await agent.run('takeScreenshot');\n  await agent.run('analyzeScreen');\n  \n  // Find and interact with username field\n  const usernameField = await agent.run('findElement', {\n    type: 'text_field',\n    text: 'Username'\n  });\n  \n  if (usernameField.elements && usernameField.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: usernameField.elements[0].id,\n      action: 'click'\n    });\n    \n    await agent.run('typeText', {\n      text: '${username}' // Template parameter for username\n    });\n  }\n  \n  // Find and interact with password field\n  const passwordField = await agent.run('findElement', {\n    type: 'text_field',\n    text: 'Password'\n  });\n  \n  if (passwordField.elements && passwordField.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: passwordField.elements[0].id,\n      action: 'click'\n    });\n    \n    await agent.run('typeText', {\n      text: '${password}' // Template parameter for password\n    });\n  }\n  \n  // Find and click login button\n  const loginButton = await agent.run('findElement', {\n    type: 'button',\n    text: 'Login'\n  });\n  \n  if (loginButton.elements && loginButton.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: loginButton.elements[0].id,\n      action: 'click'\n    });\n  }\n  \n  // Wait for login to complete\n  await agent.run('wait', {\n    milliseconds: 2000\n  });\n  \n  // Record this sequence as a pattern\n  const pattern = await agent.run('recordPattern', {\n    name: 'LoginSequence',\n    description: 'Login to application with username and password'\n  });\n  \n  console.log(`Created pattern with ID: ${pattern.patternId}`);\n  \n  // Now run the pattern with specific credentials\n  console.log('Running login pattern with specific credentials...');\n  \n  await agent.run('runPattern', {\n    patternId: pattern.patternId,\n    parameters: {\n      username: 'admin',\n      password: 'securepassword123'\n    }\n  });\n  \n  console.log('Login pattern executed successfully!');\n  \n  // Create a data export pattern\n  console.log('Creating data export pattern...');\n  \n  // Take a screenshot and analyze the dashboard screen\n  await agent.run('takeScreenshot');\n  await agent.run('analyzeScreen');\n  \n  // Find and click export button\n  const exportButton = await agent.run('findElement', {\n    type: 'button',\n    text: 'Export'\n  });\n  \n  if (exportButton.elements && exportButton.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: exportButton.elements[0].id,\n      action: 'click'\n    });\n  }\n  \n  // Select export format (dropdown)\n  const formatDropdown = await agent.run('findElement', {\n    type: 'dropdown',\n    text: 'Format'\n  });\n  \n  if (formatDropdown.elements && formatDropdown.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: formatDropdown.elements[0].id,\n      action: 'click'\n    });\n    \n    // Find and select format option\n    const formatOption = await agent.run('findElement', {\n      text: '${format}' // Template parameter for format\n    });\n    \n    if (formatOption.elements && formatOption.elements.length > 0) {\n      await agent.run('interactWithElement', {\n        elementId: formatOption.elements[0].id,\n        action: 'click'\n      });\n    }\n  }\n  \n  // Find and click download button\n  const downloadButton = await agent.run('findElement', {\n    type: 'button',\n    text: 'Download'\n  });\n  \n  if (downloadButton.elements && downloadButton.elements.length > 0) {\n    await agent.run('interactWithElement', {\n      elementId: downloadButton.elements[0].id,\n      action: 'click'\n    });\n  }\n  \n  // Wait for download to complete\n  await agent.run('wait', {\n    milliseconds: 3000\n  });\n  \n  // Record this sequence as a pattern\n  const exportPattern = await agent.run('recordPattern', {\n    name: 'DataExport',\n    description: 'Export data in specified format'\n  });\n  \n  console.log(`Created export pattern with ID: ${exportPattern.patternId}`);\n  \n  // Run the export pattern with CSV format\n  console.log('Running export pattern with CSV format...');\n  \n  await agent.run('runPattern', {\n    patternId: exportPattern.patternId,\n    parameters: {\n      format: 'CSV'\n    }\n  });\n  \n  console.log('Export pattern executed successfully!');\n}",
        "python": "# Workflow Patterns with COSMOS\nimport asyncio\nfrom cosmos import COSMOS\n\nasync def workflow_patterns_demo():\n    # Initialize COSMOS agent\n    cosmos = await COSMOS.initialize(\n        workspace_name=\"Workflow Patterns\"\n    )\n    \n    agent = await cosmos.start()\n    \n    # Check if we already have patterns\n    patterns_list = await agent.run(\"listPatterns\")\n    print(f\"Found {len(patterns_list.get('patterns', [])) if patterns_list.get('patterns') else 0} existing patterns\")\n    \n    # Create a login pattern\n    print(\"Creating login pattern...\")\n    \n    # First, navigate to the login page\n    await agent.run(\"takeScreenshot\")\n    await agent.run(\"analyzeScreen\")\n    \n    # Find and interact with username field\n    username_field = await agent.run(\"findElement\", {\n        \"type\
